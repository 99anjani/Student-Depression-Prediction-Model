# -*- coding: utf-8 -*-
"""ML-204005F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R6lFcUlf4FvFrWYO6j7bQdtZn6_IPf3B

## **Student Depression Analysis and Prediction**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder,LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.ensemble import VotingClassifier

from google.colab import drive
drive.mount("/content/drive")

df=pd.read_csv("/content/drive/My Drive/Colab Notebooks/204005F-ML_Assignment/data/Student Depression Dataset.csv")
df

df.describe()

df.isnull().sum()

df.info()

X = df.drop(columns=['Depression'])
y = df['Depression']

df_01=X.copy()
df_02=y.copy()
df_02 = df_02.to_frame()

df_01

# Drop unique column
if "id" in df_01.columns:
    df_01 = df_01.drop(columns=["id"])

df_01

df_01.info()

numerical_cols=['Age','CGPA','Work/Study Hours','Financial Stress']
categorical_cols=['Gender','City','Profession','Academic Pressure','Work Pressure','Study Satisfaction','Job Satisfaction','Sleep Duration','Dietary Habits','Degree','Have you ever had suicidal thoughts ?','Family History of Mental Illness']

"""Handling Missing values

---


"""

# Use mean - fill null values in numerical columns
for n_col in numerical_cols:
    df_01[n_col] = df_01[n_col].fillna(df_01[n_col].median())
# Use mode - fill null values in categorical columns
for c_col in categorical_cols:
    df_01[c_col] = df_01[c_col].fillna(df_01[c_col].mode()[0])
df_01.head(10)

df_01.isnull().sum()

# Check the values of categorical features
for c_col in categorical_cols:
    print(c_col, ": ", df_01[c_col].unique())
print('\nDepression : ', df_02['Depression'].unique())

"""Noise handling in numerical features

---


"""

# Skewness for numerical features
skewness = df_01[numerical_cols].skew()

# Display features with skewness
print(f'Skewness : \n{skewness}')

"""Handling Skewness - Apply transformations

---


"""

positive_skewed = skewness[skewness > 1].index.tolist()
negative_skewed = skewness[skewness < -1].index.tolist()
print("Positive Skewed Columns ", positive_skewed, '\n')
print("Negative Skewed Columns :", negative_skewed, '\n')

for p_col in positive_skewed:
    df_01[p_col] = np.log1p(df_01[p_col])

for n_col in negative_skewed:
    df_01[n_col] = np.log1p(df_01[n_col].max() - df_01[n_col] + 1)

"""
Handling Outliers

---


"""

print('Before Handling Outliers: \n')

for col in numerical_cols:
    plt.figure(figsize=(4, 2))
    sns.boxplot(x=df_01[col])
    plt.title(f'Boxplot of {col}')
    plt.xlabel(col)
    plt.show()

# IQR Calculate - numerical columns
Q1 = df_01[numerical_cols].quantile(0.25)
Q3 = df_01[numerical_cols].quantile(0.75)
IQR = Q3 - Q1 #Interquatile

# Define the bounds for outlier detection
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Identify outliers
outliers = (df_01[numerical_cols] < lower_bound) | (df_01[numerical_cols] > upper_bound)

# Count the number of outliers per column (Numerical)
outlier_counts = outliers.sum()
print(f'Outliers detected in numerical columns: \n{outlier_counts}')

# Apply capping to numerical columns
for col in numerical_cols:
    df_01[col] = np.where(df_01[col] < lower_bound[col], lower_bound[col], df_01[col])
    df_01[col] = np.where(df_01[col] > upper_bound[col], upper_bound[col], df_01[col])

# Check if bounds or not
out_of_bounds = (df_01[numerical_cols] < lower_bound) | (df_01[numerical_cols] > upper_bound)
print("\nRemaining Outliers - After capping: \n", out_of_bounds.sum())

# Display the cleaned DataFrame Shape
print("\nShape of DataFrame after capping the outliers:", df_01.shape)

df_01.isnull().sum()

print('After Handling Outliers: \n')

for col in numerical_cols:
    plt.figure(figsize=(4, 2))
    sns.boxplot(x=df_01[col])
    plt.title(f'Boxplot of {col}')
    plt.xlabel(col)
    plt.show()

"""

---

"""

df_01

"""Encoding"""

# Encode category columns
label_cols = ['Have you ever had suicidal thoughts ?', 'Family History of Mental Illness','Gender','Sleep Duration']

le = LabelEncoder()
for col in label_cols:
    df_01[col] = le.fit_transform(df_01[col])

df_01



#One-Hote Encode
df_encode= pd.get_dummies(df_01, columns=['City', 'Profession', 'Dietary Habits', 'Degree'])

encode_cols=['City', 'Profession', 'Dietary Habits', 'Degree']
oh_encoder = OneHotEncoder(sparse_output=False)
oh_encodered=oh_encoder.fit_transform(df_01[encode_cols])
oh_df=pd.DataFrame(oh_encodered,columns=oh_encoder.get_feature_names_out(encode_cols),index=df.index)
oh_df=oh_df.astype(int)
df_03 = pd.concat([df_01.drop(encode_cols, axis=1), oh_df], axis=1)
df_03

# Visualize correlations -exclude some columns
plt.figure(figsize=(10,8))
sns.heatmap(df_encode.select_dtypes(include=['number']).corr(),cmap="Blues", annot=True)
plt.title("Correlation Matrix")
plt.show()

"""Data Preprocessing - Normalization

---

Z-score Normalization
"""

scaler_z = StandardScaler()
df_03[numerical_cols] = scaler_z.fit_transform(df_03[numerical_cols])

df_03

"""After Pre-processing

---


"""

print('After Preprocessing: \n')

for col in numerical_cols:
    plt.figure(figsize=(4, 2))
    sns.histplot(df_03[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

X_train, X_test, y_train, y_test = train_test_split(df_03, df_02, test_size=0.2, random_state=42)

"""**Logistic Regression Model training**

---


"""

## TRAINING THE MODEL USING LOGISTIC REGRESSION
log_reg_model = LogisticRegression()
log_reg_model.fit(X_train, y_train)

## ACCURACY
log_reg_accuracy = log_reg_model.score(X_test, y_test)
print(f"Accuracy: {log_reg_accuracy*100:.2f}%")

log_reg_y_pred=log_reg_model.predict(X_test)
log_reg_mse = mean_squared_error(y_test, log_reg_y_pred)
log_reg_r2 = r2_score(y_test, log_reg_y_pred)
print(f'Mean Squared Error : {log_reg_mse}')
print(f'R^2 Score : {log_reg_r2}')

"""*Logistic Regression Confusion Matrix*"""

log_reg_confusion_matrix=confusion_matrix(y_test,log_reg_y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(log_reg_confusion_matrix, annot=True, fmt='d', cmap='Oranges', xticklabels=['Not Depression', 'Depression'], yticklabels=['Not Depression', 'Depression'])
plt.title('Confusion Matrix Visualization - Logistic Regression')
plt.xlabel('Predicted Value')
plt.ylabel('Actual Value')
plt.show()

"""**SVM Model Training**

---


"""

svm_model = SVC(random_state=42)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
print(f"SVM Accuracy: {accuracy_svm*100:.2f}%")

y_pred_svm=svm_model.predict(X_test)
svm_mse = mean_squared_error(y_test, y_pred_svm)
svm_r2 = r2_score(y_test, y_pred_svm)
print(f'Mean Squared Error : {svm_mse}')
print(f'R^2 Score : {svm_r2}')

"""*Svm confusion Matrix*"""

svm_confusion_matrix=confusion_matrix(y_test,y_pred_svm)
plt.figure(figsize=(6, 4))
sns.heatmap(svm_confusion_matrix, annot=True, fmt='d', cmap='YlGnBu', xticklabels=['Not Depression', 'Depression'], yticklabels=['Not Depression', 'Depression'])
plt.title('Confusion Matrix Visualization - SVM')
plt.xlabel('Predicted Value')
plt.ylabel('Actual Value')
plt.show()

"""**Random Forest Model Training**

---


"""

random_forest_model = RandomForestClassifier(random_state=42)
random_forest_model.fit(X_train, y_train)
y_pred_rf = random_forest_model.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Random Forest Accuracy: {accuracy_rf*100:.2f}%")

y_pred_rf=random_forest_model.predict(X_test)
rf_mse = mean_squared_error(y_test, y_pred_rf)
rf_r2 = r2_score(y_test, y_pred_rf)
print(f'Mean Squared Error : {rf_mse}')
print(f'R^2 Score : {rf_r2}')

rf_confusion_matrix=confusion_matrix(y_test,y_pred_rf)
plt.figure(figsize=(6, 4))
sns.heatmap(rf_confusion_matrix, annot=True, fmt='d', cmap='Purples', xticklabels=['Not Depression', 'Depression'], yticklabels=['Not Depression', 'Depression'])
plt.title('Confusion Matrix Visualization - Random Forest')
plt.xlabel('Predicted Value')
plt.ylabel('Actual Value')
plt.show()

"""**Decision Tree Model Training**

---


"""

decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X_train, y_train)
y_pred_dt = decision_tree_model.predict(X_test)

accuracy_dt = accuracy_score(y_test, y_pred_dt)
print(f"Random Forest Accuracy: {accuracy_dt*100:.2f}%")

y_pred_dt=decision_tree_model.predict(X_test)
dt_mse = mean_squared_error(y_test, y_pred_dt)
dt_r2 = r2_score(y_test, y_pred_dt)
print(f'Mean Squared Error : {dt_mse}')
print(f'R^2 Score : {dt_r2}')

dt_confusion_matrix=confusion_matrix(y_test,y_pred_dt)
plt.figure(figsize=(6, 4))
sns.heatmap(dt_confusion_matrix, annot=True, fmt='d', cmap='Greys', xticklabels=['Not Depression', 'Depression'], yticklabels=['Not Depression', 'Depression'])
plt.title('Confusion Matrix Visualization - Decision Tree')
plt.xlabel('Predicted Value')
plt.ylabel('Actual Value')
plt.show()

"""Feature Importance Visualization (Random Forest and Decision Tree)

---

Random Forest
"""

# Plot feature importance from Random Forest
rf_feature_importance = random_forest_model.feature_importances_

plt.figure(figsize=(60, 35))
sns.barplot(x=df_03.columns, y=rf_feature_importance)
plt.title('Feature Importance from Random Forest')
plt.xticks(rotation=90)
plt.show()

selcted_cols = ["Gender","Age","CGPA"'Work/Study Hours','Financial Stress','Academic Pressure','Work Pressure','Study Satisfaction','Job Satisfaction','Sleep Duration','Dietary Habits','Have you ever had suicidal thoughts ?','Family History of Mental Illness']

# Plotting feature importance for only selected columns
rf_feature_importance = random_forest_model.feature_importances_
plt.figure(figsize=(12,5))
sns.barplot(x=selcted_cols, y=rf_feature_importance[:len(selcted_cols)])
plt.title('Feature Importance from Ra')
plt.xticks(rotation=90)
plt.show()

"""Decision Tree"""

dt_feature_importance = decision_tree_model.feature_importances_
plt.figure(figsize=(60, 35))
sns.barplot(x=df_03.columns, y=dt_feature_importance)
plt.title('Feature Importance from Decision Tree')
plt.xticks(rotation=90)
plt.show()

selcted_cols = ["Gender","Age","CGPA"'Work/Study Hours','Financial Stress','Academic Pressure','Work Pressure','Study Satisfaction','Job Satisfaction','Sleep Duration','Dietary Habits','Have you ever had suicidal thoughts ?','Family History of Mental Illness']

# Plotting feature importance for only selected columns
dt_feature_importance = decision_tree_model.feature_importances_
plt.figure(figsize=(12,5))
sns.barplot(x=selcted_cols, y=dt_feature_importance[:len(selcted_cols)])
plt.title('Feature Importance from Decision Tree')
plt.xticks(rotation=90)
plt.show()

"""**Ensemble Model**

---


"""

ensemble_model = VotingClassifier(estimators=[
    ('lr', log_reg_model),
    ('rf', random_forest_model),
    ('svm', svm_model)
], voting='hard')

ensemble_model.fit(X_train, y_train)
y_pred_ensemble = ensemble_model.predict(X_test)

ensemble_accuracy = accuracy_score(y_test, y_pred_ensemble)
print(f"Ensemble Model Accuracy: {ensemble_accuracy*100:.2f}%")

y_pred_en=ensemble_model.predict(X_test)
en_mse = mean_squared_error(y_test, y_pred_ensemble)
en_r2 = r2_score(y_test, y_pred_ensemble)
print(f'Mean Squared Error : {en_mse}')
print(f'R^2 Score : {en_r2}')

en_confusion_matrix=confusion_matrix(y_test,y_pred_ensemble)
plt.figure(figsize=(6, 4))
sns.heatmap(en_confusion_matrix, annot=True, fmt='d', cmap='Greens', xticklabels=['Not Depression', 'Depression'], yticklabels=['Not Depression', 'Depression'])
plt.title('Confusion Matrix Visualization - Enssemble Model')
plt.xlabel('Predicted Value')
plt.ylabel('Actual Value')
plt.show()